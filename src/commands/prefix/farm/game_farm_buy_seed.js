const Farm = require("../../../model/farmModel");
const User = require("../../../model/userModel");
const { crops } = require("../../../utils/constants"); // ƒê·∫£m b·∫£o import ƒë√∫ng

module.exports = {
    name: "buyseed",
    description: "Mua h·∫°t gi·ªëng ƒë·ªÉ tr·ªìng tr·ªçt.",
    execute: async (message, args) => {
        const userId = message.author.id;
        let user = await User.findOne({ userId });
        let farm = await Farm.findOne({ userId });

        if (!user || !farm) {
            return message.reply("B·∫°n ch∆∞a c√≥ trang tr·∫°i! D√πng l·ªánh farm ƒë·ªÉ t·∫°o n√¥ng tr·∫°i m·ªõi.");
        }

        if (args.length < 1) {
            return message.reply("Vui l√≤ng nh·∫≠p t√™n h·∫°t gi·ªëng mu·ªën mua!");
        }

        let seedName = args[0].toLowerCase();
        let quantity = args[1] ? parseInt(args[1]) : 1; // M·∫∑c ƒë·ªãnh mua 1 h·∫°t n·∫øu kh√¥ng nh·∫≠p s·ªë l∆∞·ª£ng

        if (!crops[seedName]) {
            return message.reply(
                "H·∫°t gi·ªëng kh√¥ng h·ª£p l·ªá! C√°c lo·∫°i c√≥ s·∫µn: " + Object.keys(crops).join(", ") + "."
            );
        }

        let availableLand = farm.landSlots - farm.crops.length; // √î ƒë·∫•t tr·ªëng
        if (quantity > availableLand) {
            return message.reply(`B·∫°n ch·ªâ c√≥ **${availableLand}** √¥ ƒë·∫•t tr·ªëng, kh√¥ng th·ªÉ mua **${quantity}** h·∫°t gi·ªëng!`);
        }

        let totalCost = crops[seedName].buyPrice * quantity;
        if (user.money < totalCost) {
            return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn **${totalCost} xu**, b·∫°n ch·ªâ c√≥ **${user.money} xu**.`);
        }

        // Tr·ª´ ti·ªÅn v√† th√™m c√¢y v√†o danh s√°ch
        user.money -= totalCost;
        for (let i = 0; i < quantity; i++) {
            farm.crops.push({
                name: seedName,
                plantedAt: new Date(),
                harvestTime: crops[seedName].harvestTime, // Th·ªùi gian thu ho·∫°ch
                isHarvested: false,
                isDamaged: false,
                fertilizerUsed: false
            });
        }

        await user.save();
        await farm.save();

        message.reply(`üå± B·∫°n ƒë√£ mua **${quantity}** h·∫°t gi·ªëng **${seedName}** v·ªõi gi√° **${totalCost} xu**!`);
    },
};
