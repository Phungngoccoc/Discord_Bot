const {
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    EmbedBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    Events,
} = require('discord.js');
const { getUserData, updateUserData } = require('../../../service/userService');

let gameRunning = new Set(); // h·ªó tr·ª£ nhi·ªÅu k√™nh ch∆°i song song

module.exports = {
    name: 'tx',
    description: 'Ch∆°i T√†i X·ªâu b·∫±ng c√°ch ƒë·∫∑t c∆∞·ª£c!',

    async execute(message) {
        const channelId = message.channel.id;

        if (gameRunning.has(channelId)) {
            return message.reply('‚ö†Ô∏è V√°n T√†i X·ªâu ƒëang di·ªÖn ra trong k√™nh n√†y. Vui l√≤ng ch·ªù k·∫øt th√∫c!');
        }

        gameRunning.add(channelId);

        const embed = new EmbedBuilder()
            .setColor('#ffcc00')
            .setTitle('üé≤ Ch∆°i T√†i X·ªâu üé≤')
            .setDescription('Nh·∫•n n√∫t ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c **T√†i** ho·∫∑c **X·ªâu**! B·∫°n c√≥ **15 gi√¢y**.')
            .setFooter({ text: 'D∆∞·ªõi 10 l√† X·ªâu, t·ª´ 10 tr·ªü l√™n l√† T√†i.' });

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('bet_tai').setLabel('T√†i').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('bet_xiu').setLabel('X·ªâu').setStyle(ButtonStyle.Danger)
        );

        const msg = await message.channel.send({ embeds: [embed], components: [row] });

        const bets = new Map(); // userId -> { choice, amount }
        const userChoices = new Map(); // userId -> T√†i | X·ªâu

        const collector = msg.createMessageComponentCollector({
            time: 15000,
            filter: (i) => ['bet_tai', 'bet_xiu'].includes(i.customId),
        });

        collector.on('collect', async (i) => {
            const userId = i.user.id;
            if (userChoices.has(userId)) {
                return i.reply({ content: '‚ö†Ô∏è B·∫°n ƒë√£ ƒë·∫∑t r·ªìi!', ephemeral: true });
            }

            const choice = i.customId === 'bet_tai' ? 'T√†i' : 'X·ªâu';
            userChoices.set(userId, choice);

            const modal = new ModalBuilder()
                .setCustomId(`modal_tx_${userId}`)
                .setTitle(`ƒê·∫∑t c∆∞·ª£c v√†o ${choice}`)
                .addComponents(
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('bet_amount')
                            .setLabel('Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c:')
                            .setStyle(TextInputStyle.Short)
                            .setRequired(true)
                    )
                );

            await i.showModal(modal);
        });

        const modalCollector = message.client.on(Events.InteractionCreate, async (interaction) => {
            if (!interaction.isModalSubmit()) return;
            if (!interaction.customId.startsWith('modal_tx_')) return;

            const userId = interaction.user.id;
            const betAmount = parseInt(interaction.fields.getTextInputValue('bet_amount'));
            const choice = userChoices.get(userId);

            if (!choice || isNaN(betAmount) || betAmount <= 0) {
                return interaction.reply({ content: '‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }

            const userData = await getUserData(userId);
            if (!userData || userData.money < betAmount) {
                return interaction.reply({ content: 'üí∏ B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!', ephemeral: true });
            }

            bets.set(userId, { choice, amount: betAmount });
            await interaction.reply({ content: `‚úÖ B·∫°n ƒë√£ c∆∞·ª£c **${betAmount}** v√†o **${choice}**`, ephemeral: true });
        });

        collector.on('end', async () => {
            // B·∫Øt ƒë·∫ßu tung x√∫c x·∫Øc
            const loadingEmbed = new EmbedBuilder()
                .setColor('#ffcc00')
                .setTitle('üé≤ Tung x√∫c x·∫Øc...')
                .setDescription('<a:rolling:1228414116725653634> <a:rolling:1228414116725653634> <a:rolling:1228414116725653634>');

            const rollingMsg = await message.channel.send({ embeds: [loadingEmbed] });
            await new Promise((r) => setTimeout(r, 3000));

            const dice = Array.from({ length: 3 }, () => Math.floor(Math.random() * 6) + 1);
            const total = dice.reduce((a, b) => a + b);
            const result = total >= 10 ? 'T√†i' : 'X·ªâu';

            const emoji = ['<:tx1:1339511294453354530>', '<:tx2:1339511297338769448>', '<:tx3:1339511299368816640>', '<:tx4:1339511301617094657>', '<:tx5:1339511305723318313>', '<:tx6:1339511308554600508>'];
            const diceDisplay = dice.map((d) => emoji[d - 1]).join(' ');

            const resultEmbed = new EmbedBuilder()
                .setColor('#ffcc00')
                .setTitle('üé≤ K·∫øt qu·∫£:')
                .setDescription(`${diceDisplay}\n\nT·ªïng: **${total}**\n‚û°Ô∏è K·∫øt qu·∫£: **${result}**`);

            await rollingMsg.edit({ embeds: [resultEmbed] });

            // Tr·∫£ k·∫øt qu·∫£ t·ª´ng ng∆∞·ªùi
            let summary = '';
            for (const [userId, bet] of bets) {
                const user = await getUserData(userId);
                if (!user) continue;

                const win = bet.choice === result;
                const delta = win ? bet.amount : -bet.amount;
                await updateUserData(userId, { money: user.money + delta });

                summary += `<@${userId}> ${win ? 'üéâ th·∫Øng' : 'üíÄ thua'} **${Math.abs(delta)} xu**\n`;
            }

            if (summary) {
                await message.channel.send(summary);
            }

            gameRunning.delete(channelId);
        });
    },
};
