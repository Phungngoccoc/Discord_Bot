const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Farm = require('../../../model/farmModel');
const { crops } = require('../../../utils/constants');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('farm')
        .setDescription('Xem trang tr·∫°i c·ªßa b·∫°n')
        .addStringOption(option =>
            option.setName('t√πy_ch·ªçn')
                .setDescription('Nh·∫≠p "help" ƒë·ªÉ xem h∆∞·ªõng d·∫´n')),

    async execute(interaction) {
        const userId = interaction.user.id;
        const option = interaction.options.getString('t√πy_ch·ªçn');

        let farm = await Farm.findOne({ userId });
        if (!farm) {
            farm = new Farm({
                userId,
                landSlots: 10,
                crops: Array(10).fill(null)
            });
            await farm.save();
        }

        if (option === 'help') {
            const helpEmbed = new EmbedBuilder()
                .setColor("#4CAF50")
                .setTitle("üìú H∆∞·ªõng d·∫´n ch∆°i n√¥ng tr·∫°i")
                .setDescription("C√°c l·ªánh c∆° b·∫£n ƒë·ªÉ qu·∫£n l√Ω trang tr·∫°i c·ªßa b·∫°n.")
                .addFields(
                    { name: "üå± Mua ƒë·∫•t", value: "`/buyland` - Mua th√™m ƒë·∫•t ƒë·ªÉ tr·ªìng tr·ªçt.", inline: true },
                    { name: "üåæ Mua gi·ªëng", value: "`/buyseed` - Mua h·∫°t gi·ªëng v√† tr·ªìng ngay.", inline: true },
                    { name: "üåæ Xem gi·ªëng", value: "`/seed` - Danh s√°ch gi·ªëng c√≥ s·∫µn.", inline: true },
                    { name: "‚è≥ Thu ho·∫°ch", value: "`/harvest` - Thu ho·∫°ch c√¢y ƒë√£ ch√≠n.", inline: true },
                    { name: "üí∞ B√°n n√¥ng s·∫£n", value: "`/sell` - B√°n s·∫£n ph·∫©m ƒë·ªÉ ki·∫øm xu.", inline: true },
                    { name: "üì¶ Xem kho", value: "`/storage` - Xem kho ch·ª©a n√¥ng s·∫£n.", inline: true },
                    { name: "üè° Xem trang tr·∫°i", value: "`/farm` - Hi·ªÉn th·ªã trang tr·∫°i c·ªßa b·∫°n.", inline: true }
                )
                .setFooter({ text: "Ch√∫c b·∫°n vui v·∫ª v·ªõi trang tr·∫°i c·ªßa m√¨nh! üåª" });

            return interaction.reply({ embeds: [helpEmbed] });
        }

        let landGrid = Array(farm.landSlots).fill("üü´");
        let cropCount = {};
        const currentTime = Date.now();

        farm.crops.forEach((crop, index) => {
            if (!crop) return;

            const elapsedTime = currentTime - new Date(crop.plantedAt).getTime();
            const halfGrowthTime = crops[crop.name].harvestTime / 2;
            const fullGrowthTime = crops[crop.name].harvestTime;
            const damageTime = fullGrowthTime + 60 * 60 * 1000;

            let timeLeft = fullGrowthTime - elapsedTime;
            let status = `üå± ƒêang ph√°t tri·ªÉn...`;

            if (elapsedTime < halfGrowthTime) {
                landGrid[index] = "üå±";
            } else if (elapsedTime < fullGrowthTime) {
                landGrid[index] = "üåø";
            } else if (elapsedTime < damageTime) {
                landGrid[index] = crops[crop.name].emoji;
                status = "‚úÖ C√≥ th·ªÉ thu ho·∫°ch ngay!";
            } else {
                landGrid[index] = "üêõ";
                status = "‚ùå B·ªã s√¢u!";
            }

            if (elapsedTime >= fullGrowthTime) timeLeft = 0;
            else timeLeft = Math.ceil(timeLeft / (60 * 1000));

            const key = `${crops[crop.name].emoji} **${crop.name}** - ${status} ${timeLeft > 0 ? `(${timeLeft} ph√∫t c√≤n l·∫°i)` : ""}`;
            if (!cropCount[key]) cropCount[key] = 0;
            cropCount[key]++;
        });

        let farmDisplay = "";
        for (let i = 0; i < landGrid.length; i += 10) {
            farmDisplay += landGrid.slice(i, i + 10).join(" ") + "\n";
        }

        let farmInfo = Object.entries(cropCount).map(([info, count]) => ({
            name: " ",
            value: `${info} x${count}`,
            inline: false
        }));

        if (farmInfo.length === 0) {
            farmInfo.push({ name: " ", value: "Kh√¥ng c√≥ c√¢y n√†o ƒë∆∞·ª£c tr·ªìng!" });
        }

        const farmEmbed = new EmbedBuilder()
            .setColor("#FFA500")
            .setTitle(`üè° Trang tr·∫°i c·ªßa ${interaction.user.username}`)
            .setDescription(farmDisplay)
            .addFields(farmInfo)
            .setFooter({ text: "D√πng l·ªánh /harvest ƒë·ªÉ thu ho·∫°ch c√¢y tr·ªìng ƒë√£ ch√≠n!" });

        await interaction.reply({ embeds: [farmEmbed] });
    }
};
