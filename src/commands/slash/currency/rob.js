const { SlashCommandBuilder } = require('discord.js');
const User = require('../../../model/userModel');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rob')
        .setDescription('ü¶π‚Äç‚ôÇÔ∏è C∆∞·ªõp ti·ªÅn t·ª´ ng∆∞·ªùi kh√°c (th·∫•t b·∫°i th√¨ m·∫•t g·∫•p ƒë√¥i)')
        .addUserOption(option =>
            option.setName('nguoi_bi_cuop')
                .setDescription('Ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën c∆∞·ªõp')
                .setRequired(true)
        ),
    category: 'currency',

    async execute(interaction) {
        const userId = interaction.user.id;
        const targetUser = interaction.options.getUser('nguoi_bi_cuop');
        const targetId = targetUser.id;

        if (userId === targetId) {
            return interaction.reply({ content: '‚ùå B·∫°n kh√¥ng th·ªÉ c∆∞·ªõp ch√≠nh m√¨nh!', ephemeral: true });
        }

        try {
            let user = await User.findOne({ userId });
            let target = await User.findOne({ userId: targetId });

            if (!user || !target) {
                return interaction.reply({ content: '‚ùå Ng∆∞·ªùi ch∆°i ch∆∞a t·ªìn t·∫°i trong h·ªá th·ªëng!', ephemeral: true });
            }

            const now = Date.now();
            const cooldownTime = 12 * 60 * 60 * 1000; // 12 gi·ªù

            if (now - user.lastRob < cooldownTime) {
                const remaining = cooldownTime - (now - user.lastRob);
                const hours = Math.floor(remaining / (60 * 60 * 1000));
                const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
                return interaction.reply(`üïí B·∫°n c·∫ßn ƒë·ª£i ${hours} gi·ªù ${minutes} ph√∫t n·ªØa ƒë·ªÉ l√™n k·∫ø ho·∫°ch c∆∞·ªõp ti·∫øp.`);
            }

            const chance = Math.random(); // 50%
            const amount = Math.floor(Math.random() * (500 - 200 + 1)) + 200;

            if (chance < 0.5) {
                // Th√†nh c√¥ng
                if (target.money >= amount) {
                    user.money += amount;
                    target.money -= amount;
                    await interaction.reply(`‚úÖ B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng **${amount} xu** t·ª´ <@${targetId}>!`);
                } else {
                    user.money += target.money;
                    await interaction.reply(`‚úÖ B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng **${target.money} xu** t·ª´ <@${targetId}>, v√¨ h·ªç kh√¥ng c√≥ ƒë·ªß ti·ªÅn!`);
                    target.money = 0;
                }
            } else {
                // Th·∫•t b·∫°i
                const penalty = amount * 2;
                if (user.money >= penalty) {
                    user.money -= penalty;
                    await interaction.reply(`üöì B·∫°n b·ªã b·∫Øt v√† m·∫•t **${penalty} xu** do th·∫•t b·∫°i khi ƒëi c∆∞·ªõp!`);
                } else {
                    user.money = 0;
                    await interaction.reply(`üöì B·∫°n b·ªã b·∫Øt v√† m·∫•t to√†n b·ªô s·ªë ti·ªÅn hi·ªán c√≥ v√¨ kh√¥ng ƒë·ªß **${penalty} xu** ƒë·ªÉ n·ªôp ph·∫°t!`);
                }
            }

            user.lastRob = now;
            await user.save();
            await target.save();
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω rob:', error);
            await interaction.reply('‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán c∆∞·ªõp ti·ªÅn.');
        }
    }
};
