const Discord = require("discord.js");
const { getUserData, updateUserData } = require('../service/userService');

const emojiMap = {
    "b·∫ßu": "üçê",
    "cua": "ü¶Ä",
    "t√¥m": "ü¶ê",
    "c√°": "üêü",
    "g√†": "üêì",
    "nai": "ü¶å"
};

const choices = Object.keys(emojiMap);
const betTime = 30000; // 30 gi√¢y ƒë·∫∑t c∆∞·ª£c
let activeGame = false;
let playerBets = {}; // L∆∞u c∆∞·ª£c c·ªßa t·ª´ng ng∆∞·ªùi

module.exports = {
    name: "bcmp",
    description: "Ch∆°i B·∫ßu Cua v·ªõi nhi·ªÅu ng∆∞·ªùi! ƒê·∫∑t c∆∞·ª£c b·∫±ng reaction!",
    execute: async (message) => {
        if (activeGame) return message.reply("‚ö† Hi·ªán t·∫°i ƒë√£ c√≥ tr√≤ ch∆°i ƒëang di·ªÖn ra. Vui l√≤ng ƒë·ª£i!");

        activeGame = true;
        playerBets = {};

        // T·∫°o tin nh·∫Øn ƒë·∫∑t c∆∞·ª£c
        const embed = new Discord.EmbedBuilder()
            .setTitle("üé≤ Ch∆°i B·∫ßu Cua üé≤")
            .setDescription("H√£y ƒë·∫∑t c∆∞·ª£c b·∫±ng c√°ch reaction v√†o con v·∫≠t b·∫°n ch·ªçn!\nB·∫°n c√≥ **30 gi√¢y** ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!")
            .setColor("#ffcc00");

        const sentMessage = await message.channel.send({ embeds: [embed] });

        // Th√™m reaction emoji
        for (let emoji of Object.values(emojiMap)) {
            await sentMessage.react(emoji);
        }

        // Thu th·∫≠p reaction trong 30 gi√¢y
        const filter = (reaction, user) => !user.bot && Object.values(emojiMap).includes(reaction.emoji.name);
        const collector = sentMessage.createReactionCollector({ filter, time: betTime });

        collector.on("collect", async (reaction, user) => {
            let userId = user.id;
            let choice = Object.keys(emojiMap).find(key => emojiMap[key] === reaction.emoji.name);

            if (!choice) return;

            // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
            let userData = await getUserData(userId);
            if (!userData) {
                userData = { money: 1000 };
                await updateUserData(userId, { money: userData.money });
            }

            let betAmount = 100; // M·∫∑c ƒë·ªãnh ƒë·∫∑t 100 xu
            if (userData.money < betAmount) return message.channel.send(`<@${userId}>, b·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c!`);

            playerBets[userId] = { choice, betAmount, userData };
            message.channel.send(`<@${userId}> ƒë√£ ƒë·∫∑t c∆∞·ª£c **${betAmount} xu** v√†o **${reaction.emoji.name}**!`);
        });

        collector.on("end", async () => {
            if (Object.keys(playerBets).length === 0) {
                activeGame = false;
                return message.channel.send("‚ùå Kh√¥ng c√≥ ai tham gia! Tr√≤ ch∆°i b·ªã h·ªßy.");
            }

            // Tung x√∫c x·∫Øc (3 con)
            let results = [
                choices[Math.floor(Math.random() * choices.length)],
                choices[Math.floor(Math.random() * choices.length)],
                choices[Math.floor(Math.random() * choices.length)]
            ];

            let resultsWithEmoji = results.map(item => emojiMap[item]);

            // Ki·ªÉm tra k·∫øt qu·∫£ t·ª´ng ng∆∞·ªùi ch∆°i
            let resultText = `üé≤ **K·∫øt qu·∫£:** ${resultsWithEmoji.join(" - ")}\n\n`;
            for (let userId in playerBets) {
                let { choice, betAmount, userData } = playerBets[userId];
                let winCount = results.filter(res => res === choice).length;
                let winAmount = betAmount * winCount;

                if (winCount > 0) {
                    userData.money += winAmount;
                    resultText += `‚úÖ <@${userId}> ƒë·∫∑t ${emojiMap[choice]} v√† **th·∫Øng ${winAmount} xu**!\n`;
                } else {
                    userData.money -= betAmount;
                    resultText += `‚ùå <@${userId}> ƒë·∫∑t ${emojiMap[choice]} nh∆∞ng kh√¥ng tr√∫ng, m·∫•t ${betAmount} xu.\n`;
                }

                await updateUserData(userId, { money: userData.money });
            }

            activeGame = false;
            message.channel.send(resultText);
        });
    }
};
