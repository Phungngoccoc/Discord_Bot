require("dotenv").config();
const { google } = require("googleapis");
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, NoSubscriberBehavior } = require("@discordjs/voice");
const play = require("play-dl");
const ffmpeg = require("ffmpeg-static");

const queue = new Map(); // H√†ng ch·ªù ph√°t nh·∫°c

const youtube = google.youtube({
    version: "v3",
    auth: process.env.YOUTUBE_API_KEY,
});

module.exports = {
    name: "m",
    description: "ƒêi·ªÅu khi·ªÉn nh·∫°c trong voice channel",
    async execute(message) {
        if (!message.content.startsWith("km")) return;

        const args = message.content.split(" ").slice(1);
        const command = args.shift();
        const url = args[0];
        const voiceChannel = message.member.voice.channel;

        if (!voiceChannel) return message.reply("‚ùå B·∫°n ph·∫£i v√†o voice channel tr∆∞·ªõc!");

        const serverQueue = queue.get(message.guild.id);
        switch (command) {
            case "play":
                if (!url) {
                    return message.reply("‚ùå B·∫°n ph·∫£i cung c·∫•p m·ªôt URL h·ª£p l·ªá!");
                }

                if (url.includes("youtube.com") || url.includes("youtu.be")) {
                    const video = await searchYouTube(url);
                    if (!video) return message.reply("‚ùå Kh√¥ng t√¨m th·∫•y video tr√™n YouTube.");
                    playMusic(message, video.url, voiceChannel);
                } else if (await play.validate(url)) {
                    playMusic(message, url, voiceChannel);
                } else {
                    return message.reply("‚ùå URL kh√¥ng h·ª£p l·ªá!");
                }
                break;
            case "stop":
                stopMusic(message, serverQueue);
                break;
            case "skip":
                skipMusic(message, serverQueue);
                break;
            case "queue":
                showQueue(message, serverQueue);
                break;
            default:
                message.reply("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! D√πng `km play <url>`, `km stop`, `km skip`, `km queue`.");
        }
    },
};

// T√¨m ki·∫øm video tr√™n YouTube
async function searchYouTube(query) {
    try {
        const res = await youtube.search.list({
            part: "snippet",
            q: query,
            maxResults: 1,
        });
        const video = res.data.items[0];
        if (video) {
            return {
                title: video.snippet.title,
                url: `https://www.youtube.com/watch?v=${video.id.videoId}`,
            };
        }
    } catch (err) {
        console.error("L·ªói t√¨m ki·∫øm YouTube:", err);
    }
    return null;
}

// H√†m ph√°t nh·∫°c
async function playMusic(message, url, voiceChannel) {
    const guildId = message.guild.id;
    let serverQueue = queue.get(guildId);

    if (!serverQueue) {
        const connection = joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: guildId,
            adapterCreator: message.guild.voiceAdapterCreator,
        });

        const player = createAudioPlayer({
            behaviors: { noSubscriber: NoSubscriberBehavior.Play },
        });

        serverQueue = { connection, player, songs: [] };
        queue.set(guildId, serverQueue);

        serverQueue.songs.push(url);
        playNext(message, serverQueue);
    } else {
        serverQueue.songs.push(url);
        message.reply(`üé∂ ƒê√£ th√™m v√†o h√†ng ch·ªù: ${url}`);
    }
}

// H√†m ph√°t b√†i ti·∫øp theo
async function playNext(message, serverQueue) {
    if (!serverQueue.songs.length) {
        message.reply("üì≠ H·∫øt nh·∫°c! Bot s·∫Ω r·ªùi kh·ªèi voice channel sau 5 gi√¢y.");

        setTimeout(() => {
            if (serverQueue.connection) {
                serverQueue.connection.destroy();
                queue.delete(message.guild.id);
            }
        }, 5000);

        return;
    }

    const song = serverQueue.songs.shift();
    try {
        const stream = await play.stream(song, { quality: 2 }); // Ch·ªânh ch·∫•t l∆∞·ª£ng l√™n cao nh·∫•t
        const resource = createAudioResource(stream.stream, { inputType: stream.type });

        serverQueue.player.play(resource);
        serverQueue.connection.subscribe(serverQueue.player);

        message.reply(`üéµ ƒêang ph√°t: ${song}`);

        serverQueue.player.once(AudioPlayerStatus.Idle, () => {
            playNext(message, serverQueue);
        });
    } catch (error) {
        message.reply("‚ùå L·ªói khi ph√°t nh·∫°c! B·ªè qua b√†i n√†y.");
        console.error(error);
        playNext(message, serverQueue);
    }
}

// H√†m d·ª´ng nh·∫°c
function stopMusic(message, serverQueue) {
    if (!serverQueue) return message.reply("‚ùå Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t!");

    serverQueue.songs = [];
    serverQueue.player.stop();
    serverQueue.connection.destroy();
    queue.delete(message.guild.id);

    message.reply("‚èπ ƒê√£ d·ª´ng nh·∫°c!");
}

// H√†m b·ªè qua b√†i h√°t
function skipMusic(message, serverQueue) {
    if (!serverQueue || serverQueue.songs.length === 0) {
        return message.reply("‚ùå Kh√¥ng c√≥ b√†i n√†o ƒë·ªÉ b·ªè qua!");
    }

    serverQueue.player.stop();
    playNext(message, serverQueue);
    message.reply("‚è≠ ƒê√£ b·ªè qua b√†i hi·ªán t·∫°i!");
}

// Hi·ªÉn th·ªã danh s√°ch h√†ng ch·ªù
function showQueue(message, serverQueue) {
    if (!serverQueue || serverQueue.songs.length === 0) {
        return message.reply("üì≠ H√†ng ch·ªù tr·ªëng!");
    }

    const queueList = serverQueue.songs.map((song, index) => `${index + 1}. ${song}`).join("\n");
    message.reply(`üé∂ **Danh s√°ch h√†ng ch·ªù:**\n${queueList}`);
}
