const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { getUserData, updateUserData } = require('../service/userService');  // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng

// H√†m ch∆°i blackjack
module.exports = {
    name: 'bj',
    description: 'üÉè Ch∆°i Blackjack! ƒê·∫∑t c∆∞·ª£c v√† th·ª≠ v·∫≠n may c·ªßa b·∫°n!',
    execute: async (message) => {
        const userId = message.author.id;
        const getCard = () => Math.floor(Math.random() * 11) + 1;

        // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ MongoDB
        let user = await getUserData(userId);

        // N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ ti·ªÅn, t·∫°o m·ªõi v·ªõi 1000 ti·ªÅn
        if (!user) {
            user = { money: 1000 };
            await updateUserData(userId, { money: user.money });
        }

        // L·∫•y s·ªë ti·ªÅn c∆∞·ª£c t·ª´ message.content b·∫±ng regex
        const match = message.content.match(/blackjack (\d+)/);
        let betAmount = 1; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ tham s·ªë

        if (match && match[1]) {
            betAmount = parseInt(match[1]);
        }

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa s·ªë ti·ªÅn c∆∞·ª£c
        if (isNaN(betAmount) || betAmount <= 0) {
            return message.reply("‚ùå Vui l√≤ng cung c·∫•p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá. V√≠ d·ª•: `!blackjack 1000`.");
        }

        if (betAmount > user.money) {
            return message.reply("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn n√†y.");
        }

        // Tr·ª´ ti·ªÅn c∆∞·ª£c
        user.money -= betAmount;
        await updateUserData(userId, { money: user.money });

        let playerCards = [getCard(), getCard()];
        let botCards = [getCard(), getCard()];
        let playerScore = playerCards.reduce((a, b) => a + b, 0);
        let botScore = botCards.reduce((a, b) => a + b, 0);

        // T·∫°o n√∫t R√∫t th√™m v√† D·ª´ng
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('hit').setLabel('üÉè R√∫t th√™m').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('stand').setLabel('üõë D·ª´ng').setStyle(ButtonStyle.Danger)
        );

        // H√†m chuy·ªÉn ƒë·ªïi s·ªë th√†nh emoji ƒë·∫°i di·ªán cho c√°c qu√¢n b√†i
        const cardToEmoji = (cardValue) => {
            const cardEmojis = {
                1: 'üÇ°', 2: 'üÇ¢', 3: 'üÇ£', 4: 'üÇ§', 5: 'üÇ•', 6: 'üÇ¶',
                7: 'üÇß', 8: 'üÇ®', 9: 'üÇ©', 10: 'üÇ™', 11: 'üÉè',
            };
            return cardEmojis[cardValue] || 'üé¥'; // Default to a generic card emoji if not found
        };

        // T·∫°o Embed
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setAuthor({
                name: `${message.author.username} ƒëang ch∆°i Blackjack`,
                iconURL: message.author.displayAvatarURL(),
            })
            .setThumbnail(message.author.displayAvatarURL())
            .addFields(
                { name: `üé¥ ${message.author.username} [${playerScore}]`, value: `${playerCards.map(card => cardToEmoji(card)).join(' ')}`, inline: true },
                { name: '                ü§ñ Dealer **[10+?]**', value: `üÇ™üÇ™`, inline: true }
            );

        let msg = await message.reply({
            embeds: [embed],
            components: [row]
        });

        // B·ªô x·ª≠ l√Ω t∆∞∆°ng t√°c n√∫t b·∫•m
        const filter = (interaction) => interaction.user.id === message.author.id;
        const collector = msg.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (interaction) => {
            if (interaction.customId === 'hit') {
                let newCard = getCard();
                playerCards.push(newCard);
                playerScore += newCard;

                if (playerScore > 21) {
                    while (botScore < 17) {
                        botCards.push(getCard());
                        botScore = botCards.reduce((a, b) => a + b, 0);
                    }

                    let result, mess;
                    //h√≤a
                    if (playerScore === botScore || playerScore > 21 && botScore > 21) {
                        user.money += betAmount;
                        result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                        mess = `H√≤a! B·∫°n ƒë√£ nh·∫≠n l·∫°i ${betAmount} xu`;
                    }
                    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
                    else if (playerScore > botScore && playerScore <= 21) {
                        user.money += betAmount * 2;
                        result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                        mess = `B·∫°n ƒë√£ th·∫Øng ${betAmount} xu`;
                    } else {
                        user.money -= betAmount;
                        result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                        mess = `B·∫°n ƒë√£ thua ${betAmount} xu`;
                    }

                    await updateUserData(userId, { money: user.money });

                    await interaction.update({
                        embeds: [new EmbedBuilder()
                            .setColor('#0099ff')
                            .setAuthor({
                                name: `${message.author.username} ƒëang ch∆°i Blackjack`,
                                iconURL: message.author.displayAvatarURL(),
                            })
                            .setThumbnail(message.author.displayAvatarURL())
                            .addFields(
                                { name: `üé¥ ${message.author.username} [${playerScore}]`, value: `${playerCards.map(card => cardToEmoji(card)).join(' ')}`, inline: true },
                                { name: `ü§ñ Dealer **[${botScore}]**`, value: `${result}`, inline: true },
                                { name: mess, value: " " }
                            )
                        ],
                        components: []
                    });

                    return collector.stop();
                }

                await interaction.update({
                    embeds: [new EmbedBuilder()
                        .setColor('#0099ff')
                        .setAuthor({
                            name: `${message.author.username} ƒëang ch∆°i Blackjack`,
                            iconURL: message.author.displayAvatarURL(),
                        })
                        .setThumbnail(message.author.displayAvatarURL())
                        .addFields(
                            { name: `üé¥ ${message.author.username} [${playerScore}]`, value: `${playerCards.map(card => cardToEmoji(card)).join(' ')}`, inline: true },
                            { name: 'ü§ñ Dealer **[10+?]**', value: ` `, inline: true }
                        )
                    ],
                    components: [row]
                });
            }

            if (interaction.customId === 'stand') {
                // Bot ti·∫øp t·ª•c r√∫t n·∫øu ƒëi·ªÉm c·ªßa bot d∆∞·ªõi 16
                while (botScore < 17) {
                    botCards.push(getCard());
                    botScore = botCards.reduce((a, b) => a + b, 0);
                }

                let result, mess;
                //h√≤a
                if (playerScore === botScore || playerScore > 21 && botScore > 21) {
                    user.money += betAmount;
                    result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                    mess = `H√≤a! B·∫°n ƒë√£ nh·∫≠n l·∫°i ${betAmount} xu`;
                }
                // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
                else if (playerScore > botScore && playerScore <= 21) {
                    user.money += betAmount * 2;
                    result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                    mess = `B·∫°n ƒë√£ th·∫Øng ${betAmount} xu`;
                } else {
                    user.money -= betAmount;
                    result = `${botCards.map(card => cardToEmoji(card)).join(' ')}`;
                    mess = `B·∫°n ƒë√£ thua ${betAmount} xu`;
                }

                await updateUserData(userId, { money: user.money });

                await interaction.update({
                    embeds: [new EmbedBuilder()
                        .setColor('#0099ff')
                        .setAuthor({
                            name: `${message.author.username} ƒëang ch∆°i Blackjack`,
                            iconURL: message.author.displayAvatarURL(),
                        })
                        .setThumbnail(message.author.displayAvatarURL())
                        .addFields(
                            { name: `üé¥ ${message.author.username} [${playerScore}]`, value: `${playerCards.map(card => cardToEmoji(card)).join(' ')}`, inline: true },
                            { name: `ü§ñ Dealer **[${botScore}]**`, value: `${result}`, inline: true },
                            { name: mess, value: " " }
                        )
                    ],
                    components: []
                });
            }
        });
    }
};
